---

- name: Create breakerbox work directory
  file: path="{{ item }}" state=directory
  with_items:
    - "{{ breakerbox_docker_work_dir }}"
    - "{{ breakerbox_docker_conf_dir }}"
    - "{{ breakerbox_docker_ctmpl_dir }}"

- name: Create breakerbox config directory
  file: path="{{ breakerbox_docker_conf_dir }}" state=directory

- name: Copy breakerbox config file
  template: 
    src:  "breakerbox.yml.j2"
    dest: "{{ breakerbox_docker_conf_dir }}/breakerbox.yml"
  register: config

- name: Create consul-template template file of breakerbox config.properties
  template: 
    src:  "instances.yml.ctmpl.j2"
    dest: "{{ breakerbox_docker_ctmpl_dir }}/instances.yml.ctmpl"

- name: Render consul-template template of breakerbox instances config
  shell: >
    consul-template \
      -consul "{{ breakerbox_docker_consul_host }}:{{ breakerbox_docker_consul_port }}" \
      -template "{{ breakerbox_docker_ctmpl_dir }}/instances.yml.ctmpl:{{ breakerbox_docker_conf_dir }}/instances.yml" \
      -once
  register: ctmpl

#- debug: var=ctmpl

- name: Find current breakerbox docker container id
  shell: 'docker ps -a -q --filter="ancestor=jplock/breakerbox:{{ breakerbox_docker_version }}"'
  register: id

- debug: var=id

- name: Remove breakerbox docker container when image to use changes
  docker:
    name:  breakerbox
    image: "jplock/breakerbox:{{ breakerbox_docker_version }}"
    state: absent
  when: id.stdout == ''

- name: Run breakerbox container
  docker:
    name:    breakerbox
    image:   "jplock/breakerbox:{{ breakerbox_docker_version }}"
    ports:   "{{ breakerbox_docker_ports }}"
    state:   started
    volumes: "{{ breakerbox_docker_volumes }}"
    command: "server /opt/conf/breakerbox.yml"
  register: run

- name: Reload breakerbox container
  docker:
    name:  breakerbox
    image: "jplock/breakerbox:{{ breakerbox_docker_version }}"
    state: reloaded
  when: config|changed and not run|changed

- name: Configure supervisor to monitor breakerbox container
  include: supervisor.yml
  when: breakerbox_docker_manage_with_supervisor
